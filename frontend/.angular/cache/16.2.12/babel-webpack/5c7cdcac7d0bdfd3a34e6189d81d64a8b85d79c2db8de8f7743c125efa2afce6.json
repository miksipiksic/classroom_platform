{"ast":null,"code":"const passwordRegex = /^(?=.*[A-Z])(?=.*[a-z]{3,})(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z][A-Za-z\\d@$!%*?&]{5,9}$/;\nexport class ChangePasswordComponent {\n  constructor(userService) {\n    this.userService = userService;\n    this.znaStaru = true;\n    this.staraLozinka = \"\";\n    this.novaLozinka = \"\";\n    this.potvrdaLozinka = \"\";\n    this.staraLozinkaKorisnika = \"\";\n    this.korisnickoIme = \"\";\n    this.bezbedonosnoPitanje = \"\";\n    this.odgovor = \"\";\n    this.odgovorNaPitanje = \"\";\n    this.dalje = false;\n    this.tacanOdgovor = false;\n  }\n  potvrdi() {\n    this.userService.nadjiLozinku(this.korisnickoIme).subscribe(data => {\n      this.staraLozinkaKorisnika = data;\n    });\n    if (this.staraLozinkaKorisnika === this.staraLozinka) {\n      if (this.novaLozinka === this.potvrdaLozinka) {\n        if (!passwordRegex.test(this.novaLozinka)) {\n          alert(\"Pogresan format.\");\n          return;\n        }\n        this.userService.promeniLozinku(this.korisnickoIme, this.novaLozinka).subscribe(data => {\n          if (data.message == \"Lozinka promenjena.\") alert(\"Lozinka promenjena.\");\n        });\n      } else {\n        alert(\"Lozinke se ne poklapaju\");\n      }\n    } else {\n      alert(\"Pogresna stara lozinka.\");\n    }\n  }\n  pitanje() {\n    this.znaStaru = !this.znaStaru;\n  }\n  unetoKorisnickoIme() {\n    alert(this.korisnickoIme);\n    this.userService.dohvatiKorisnika(this.korisnickoIme).subscribe(data => {\n      this.u = data;\n      if (this.u != null) {\n        this.dalje = !this.dalje;\n        this.bezbedonosnoPitanje = this.u.bezbedonosnoPitanje;\n        this.odgovorNaPitanje = this.u.odgovor;\n      } else {\n        alert(\"Ne postoji korisnik\");\n      }\n    });\n  }\n  potvrdiOdgovor() {\n    if (this.odgovor == this.odgovorNaPitanje) {\n      this.dalje = !this.dalje;\n      this.tacanOdgovor = !this.tacanOdgovor;\n    } else {\n      alert(\"Pogresan odgovor\");\n    }\n  }\n  potvrdiNovu() {\n    if (this.novaLozinka === this.potvrdaLozinka) {\n      if (!passwordRegex.test(this.novaLozinka)) {\n        alert(\"Pogresan format.\");\n        return;\n      }\n      this.userService.promeniLozinku(this.korisnickoIme, this.novaLozinka).subscribe(data => {\n        if (data.message == \"Lozinka promenjena.\") alert(\"Lozinka promenjena.\");\n      });\n    } else {\n      alert(\"Lozinke se ne poklapaju\");\n    }\n  }\n}","map":{"version":3,"names":["passwordRegex","ChangePasswordComponent","constructor","userService","znaStaru","staraLozinka","novaLozinka","potvrdaLozinka","staraLozinkaKorisnika","korisnickoIme","bezbedonosnoPitanje","odgovor","odgovorNaPitanje","dalje","tacanOdgovor","potvrdi","nadjiLozinku","subscribe","data","test","alert","promeniLozinku","message","pitanje","unetoKorisnickoIme","dohvatiKorisnika","u","potvrdiOdgovor","potvrdiNovu"],"sources":["C:\\Users\\vm200325d\\Documents\\faks\\pia\\pia_projekat\\frontend\\src\\app\\change-password\\change-password.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { UserService } from '../services/user.service';\nimport User from '../models/user';\n\n@Component({\n  selector: 'app-change-password',\n  templateUrl: './change-password.component.html',\n  styleUrls: ['./change-password.component.css']\n})\n\n\nconst passwordRegex = /^(?=.*[A-Z])(?=.*[a-z]{3,})(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z][A-Za-z\\d@$!%*?&]{5,9}$/;\n\nexport class ChangePasswordComponent {\n\n  constructor(private userService: UserService) {}\n\n  znaStaru: boolean = true;\n  staraLozinka: string = \"\";\n  novaLozinka: string = \"\";\n  potvrdaLozinka: string = \"\";\n\n  staraLozinkaKorisnika = \"\";\n  korisnickoIme = \"\";\n\n  potvrdi() {\n    this.userService.nadjiLozinku(this.korisnickoIme).subscribe(\n      data => {\n        this.staraLozinkaKorisnika = data;\n      }\n    )\n\n    if (this.staraLozinkaKorisnika === this.staraLozinka) {\n      if (this.novaLozinka === this.potvrdaLozinka) {\n        if (!passwordRegex.test(this.novaLozinka)) {\n          alert(\"Pogresan format.\");\n          return;\n        }\n        this.userService.promeniLozinku(this.korisnickoIme, this.novaLozinka).subscribe(\n          data=>{\n            if(data.message==\"Lozinka promenjena.\") alert(\"Lozinka promenjena.\")\n          }\n        )\n      }else {\n        alert(\"Lozinke se ne poklapaju\")\n      }\n    } else {\n      alert(\"Pogresna stara lozinka.\")\n    }\n  }\n\n  u: User | undefined;\n\n  bezbedonosnoPitanje: string = \"\";\n  odgovor: string= \"\";\n  odgovorNaPitanje: string = \"\";\n\n  pitanje() {\n    this.znaStaru = !this.znaStaru;\n  }\n  dalje: boolean = false;\n  unetoKorisnickoIme() {\n    alert(this.korisnickoIme)\n    this.userService.dohvatiKorisnika(this.korisnickoIme).subscribe(\n      data => {\n        this.u = data;\n        if (this.u != null) {\n          this.dalje = !this.dalje;\n        \n        \n          this.bezbedonosnoPitanje = this.u.bezbedonosnoPitanje;\n          this.odgovorNaPitanje = this.u.odgovor;\n        \n        }  else {\n          alert(\"Ne postoji korisnik\")\n        }\n      }\n    )\n    \n  }\n  tacanOdgovor: boolean = false;\n  potvrdiOdgovor() {\n    if(this.odgovor == this.odgovorNaPitanje) {\n    this.dalje = !this.dalje;\n    this.tacanOdgovor = !this.tacanOdgovor;\n  } else {\n    alert(\"Pogresan odgovor\");\n  }\n  }\n\n  potvrdiNovu() {\n    if (this.novaLozinka === this.potvrdaLozinka) {\n      if (!passwordRegex.test(this.novaLozinka)) {\n        alert(\"Pogresan format.\");\n        return;\n      }\n      this.userService.promeniLozinku(this.korisnickoIme, this.novaLozinka).subscribe(\n        data=>{\n          if(data.message==\"Lozinka promenjena.\") alert(\"Lozinka promenjena.\")\n        }\n      )\n    } else {\n      alert(\"Lozinke se ne poklapaju\");\n    }\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}